// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_transaction_storage`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: 2025-09-26, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/bulletin-polkadot-runtime/bulletin_polkadot_runtime.wasm
// --pallet=pallet_transaction_storage
// --header=/home/ubuntu/bkontur/polkadot-bulletin-chain/scripts/cmd/file_header.txt
// --output=./runtimes/bulletin-polkadot/src/weights
// --wasm-execution=compiled
// --steps=2
// --repeat=1
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_transaction_storage`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_transaction_storage::WeightInfo for WeightInfo<T> {
	/// Storage: `TransactionStorage::BlockTransactions` (r:1 w:1)
	/// Proof: `TransactionStorage::BlockTransactions` (`max_values`: Some(1), `max_size`: Some(36866), added: 37361, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[1, 8388608]`.
	fn store(_l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `38351`
		// Minimum execution time: 25_540_000 picoseconds.
		Weight::from_parts(85_350_614_000, 0)
			.saturating_add(Weight::from_parts(0, 38351))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Transactions` (r:1 w:0)
	/// Proof: `TransactionStorage::Transactions` (`max_values`: None, `max_size`: Some(36886), added: 39361, mode: `MaxEncodedLen`)
	/// Storage: `TransactionStorage::BlockTransactions` (r:1 w:1)
	/// Proof: `TransactionStorage::BlockTransactions` (`max_values`: Some(1), `max_size`: Some(36866), added: 37361, mode: `MaxEncodedLen`)
	fn renew() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `160`
		//  Estimated: `40351`
		// Minimum execution time: 29_090_000 picoseconds.
		Weight::from_parts(29_090_000, 0)
			.saturating_add(Weight::from_parts(0, 40351))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::ProofChecked` (r:1 w:1)
	/// Proof: `TransactionStorage::ProofChecked` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `TransactionStorage::ChunkCount` (r:1 w:0)
	/// Proof: `TransactionStorage::ChunkCount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `System::ParentHash` (r:1 w:0)
	/// Proof: `System::ParentHash` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `TransactionStorage::Transactions` (r:1 w:0)
	/// Proof: `TransactionStorage::Transactions` (`max_values`: None, `max_size`: Some(36886), added: 39361, mode: `MaxEncodedLen`)
	fn check_proof() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `36984`
		//  Estimated: `40351`
		// Minimum execution time: 92_570_000 picoseconds.
		Weight::from_parts(92_570_000, 0)
			.saturating_add(Weight::from_parts(0, 40351))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Authorizations` (r:1 w:1)
	/// Proof: `TransactionStorage::Authorizations` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn authorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3530`
		// Minimum execution time: 17_550_000 picoseconds.
		Weight::from_parts(17_550_000, 0)
			.saturating_add(Weight::from_parts(0, 3530))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Authorizations` (r:1 w:1)
	/// Proof: `TransactionStorage::Authorizations` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn refresh_account_authorization() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3530`
		// Minimum execution time: 15_761_000 picoseconds.
		Weight::from_parts(15_761_000, 0)
			.saturating_add(Weight::from_parts(0, 3530))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Authorizations` (r:1 w:1)
	/// Proof: `TransactionStorage::Authorizations` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn authorize_preimage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `3530`
		// Minimum execution time: 12_220_000 picoseconds.
		Weight::from_parts(12_220_000, 0)
			.saturating_add(Weight::from_parts(0, 3530))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Authorizations` (r:1 w:1)
	/// Proof: `TransactionStorage::Authorizations` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn refresh_preimage_authorization() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3530`
		// Minimum execution time: 14_670_000 picoseconds.
		Weight::from_parts(14_670_000, 0)
			.saturating_add(Weight::from_parts(0, 3530))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Authorizations` (r:1 w:1)
	/// Proof: `TransactionStorage::Authorizations` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn remove_expired_account_authorization() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3530`
		// Minimum execution time: 25_060_000 picoseconds.
		Weight::from_parts(25_060_000, 0)
			.saturating_add(Weight::from_parts(0, 3530))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `TransactionStorage::Authorizations` (r:1 w:1)
	/// Proof: `TransactionStorage::Authorizations` (`max_values`: None, `max_size`: Some(65), added: 2540, mode: `MaxEncodedLen`)
	fn remove_expired_preimage_authorization() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `96`
		//  Estimated: `3530`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_000_000, 0)
			.saturating_add(Weight::from_parts(0, 3530))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
