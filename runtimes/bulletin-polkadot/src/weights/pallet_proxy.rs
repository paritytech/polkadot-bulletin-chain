// Copyright (C) Parity Technologies and the various Polkadot contributors, see Contributions.md
// for a list of specific contributors.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_proxy`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 48.0.0
//! DATE: 2025-10-06, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ggwpez-ref-hw`, CPU: `AMD EPYC 7232P 8-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/production/wbuild/bulletin-polkadot-runtime/bulletin_polkadot_runtime.wasm
// --pallet=pallet_proxy
// --header=/home/ubuntu/bkontur/polkadot-bulletin-chain/scripts/cmd/file_header.txt
// --output=./runtimes/bulletin-polkadot/src/weights
// --wasm-execution=compiled
// --steps=2
// --repeat=1
// --heap-pages=4096
// --exclude-extrinsics=pallet_proxy::announce,pallet_proxy::proxy_announced,pallet_proxy::reject_announcement,pallet_proxy::remove_announcement,pallet_proxy::poke_deposit

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_proxy`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {
	/// Storage: `Proxy::Proxies` (r:1 w:0)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(649), added: 3124, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 15]`.
	fn proxy(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125 + p * (37 ±0)`
		//  Estimated: `4114`
		// Minimum execution time: 19_850_000 picoseconds.
		Weight::from_parts(20_130_000, 0)
			.saturating_add(Weight::from_parts(0, 4114))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn proxy_announced(_a: u32, _p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
				.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_announcement(_a: u32, _p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
				.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn reject_announcement(_a: u32, _p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
				.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn announce(_a: u32, _p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
				.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(649), added: 3124, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 15]`.
	fn add_proxy(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125 + p * (37 ±0)`
		//  Estimated: `4114`
		// Minimum execution time: 17_980_000 picoseconds.
		Weight::from_parts(19_980_000, 0)
			.saturating_add(Weight::from_parts(0, 4114))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(649), added: 3124, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 15]`.
	fn remove_proxy(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125 + p * (37 ±0)`
		//  Estimated: `4114`
		// Minimum execution time: 17_180_000 picoseconds.
		Weight::from_parts(18_440_000, 0)
			.saturating_add(Weight::from_parts(0, 4114))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(649), added: 3124, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 15]`.
	fn remove_proxies(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `125 + p * (37 ±0)`
		//  Estimated: `4114`
		// Minimum execution time: 12_670_000 picoseconds.
		Weight::from_parts(13_060_000, 0)
			.saturating_add(Weight::from_parts(0, 4114))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(649), added: 3124, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[1, 15]`.
	fn create_pure(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `139`
		//  Estimated: `4114`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(23_230_000, 0)
			.saturating_add(Weight::from_parts(0, 4114))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Proxy::Proxies` (r:1 w:1)
	/// Proof: `Proxy::Proxies` (`max_values`: None, `max_size`: Some(649), added: 3124, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 14]`.
	fn kill_pure(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `163 + p * (37 ±0)`
		//  Estimated: `4114`
		// Minimum execution time: 17_690_000 picoseconds.
		Weight::from_parts(20_780_000, 0)
			.saturating_add(Weight::from_parts(0, 4114))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Benchmark::Override` (r:0 w:0)
	/// Proof: `Benchmark::Override` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn poke_deposit() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_446_744_073_709_551_000 picoseconds.
		Weight::from_parts(18_446_744_073_709_551_000, 0)
				.saturating_add(Weight::from_parts(0, 0))
	}
}
